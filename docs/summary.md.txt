Git命令
git clone https://github.com/1c22/2024-Task2-chengyi.git
将个人仓库克隆到本地

cd 2024-Task2-chengyi
切换目录

git add docs/ images/ README.md
将文件添加到 Git 暂存区

git commit -m "完成任务一：提交Grok回答文档和截图"
提交更改到本地仓库

git push origin main
将更改推送到你GitHub 仓库

conda命令
conda create -n p372 python==3.7.2
创建一个版本为3.7.2的虚拟环境

activate p72
激活虚拟环境

pip install
安装

pip list
查看已经安装的库

pip install -r requirements.txt
安装仓库中的依赖

python plot.py
运行仓库中的 Plot.py 程序

一、Anaconda环境配置的优点
 
1. 多环境管理便捷
 
-Anaconda允许用户轻松创建、切换和删除不同的Python环境。这对于开发不同项目或使用不同版本库的开发者非常有用。
2. 包管理高效
 
- Anaconda拥有自己的包管理器conda，它可以自动解决包的依赖关系。在安装一个包时，conda会分析该包所需的其他依赖包，并一并安装，大大减少了手动处理依赖问题的工作量。
3. 跨平台支持
 
- Anaconda可在Windows、MacOS和Linux等多种操作系统上使用，开发者在不同操作系统间切换工作时，无需重新学习新的环境配置方式，保持了操作的一致性。
 
二、Anaconda环境配置的难点
 
1. 环境冲突排查复杂
 
- 尽管conda会尽量解决包依赖问题，但在复杂的项目中，仍然可能出现环境冲突。例如，两个不同的包可能依赖同一个包的不同版本，conda可能无法完美解决这种冲突。排查这类冲突需要对包的依赖关系有深入理解，且可能需要花费大量时间尝试不同的解决方法，如更换包版本、调整安装顺序等。
 
2. 网络问题影响配置
 
- 安装包和创建环境时，需要从远程仓库下载相关文件。若网络不稳定或存在防火墙限制，可能导致下载失败、安装中断等问题。此外，某些国外的包源可能访问速度较慢，需要用户手动配置国内镜像源，但配置不当也会引发新的问题，如镜像源不可用或下载的包不完整。
 
3. 高级配置要求高
 
- 对于一些高级用户需求，如自定义环境变量、在特定环境中配置特定的Python解释器路径等，需要用户对操作系统的环境变量机制和Anaconda的底层配置有深入了解，否则可能导致配置错误，影响环境的正常使用。


三、Git分支管理中的经验
 
1. 合理规划分支结构
 
- 主分支 稳定核心：主分支应始终保持稳定，代表项目的正式发布版本。只有经过充分测试和验证的代码才能合并到主分支。例如，一个软件产品的每次正式上线版本都对应主分支上的一个提交。
 
- 开发分支 集中开发：开发分支是日常开发的主要场所，所有新功能的开发、代码改进都在这个分支上进行。开发人员将各自的功能分支合并到开发分支，最终再将开发分支合并到主分支进行发布。
 
- 功能分支 独立开发：每个新功能都应在一个独立的功能分支上开发，分支命名可以采用feature/功能名称的形式，如feature/user - login。这样可以保证不同功能开发相互隔离，便于管理和维护。功能开发完成并测试通过后，将其合并到开发分支。
 
2. 定期合并与更新分支
 
- 功能分支开发完成后应及时合并到开发分支，避免长时间不合并导致与开发分支差异过大，增加合并难度。同样，开发分支经过一段时间的开发积累，应及时合并到主分支，确保主分支能及时包含新功能。
 
- 开发人员在自己的功能分支开发过程中，应定期从开发分支拉取最新代码，以保持功能分支与开发分支同步，减少最终合并时的冲突。

三.   部署过程中常见问题及解决方案
 
- 依赖缺失：项目部署时提示缺少某些库。解决方案是检查项目的 requirements.txt 文件（若有），确认所需库及版本，然后在部署环境中使用 pip install -r requirements.txt 安装。若没有 requirements.txt ，可手动根据报错信息安装缺失库，如提示缺少 flask ，则使用 pip install flask 安装。
 
- 端口冲突：部署Web应用时，指定端口被其他程序占用。通过命令查看占用端口的程序并关闭，如在Linux系统下使用 lsof -i :端口号 查看占用端口程序的PID，然后用 kill -9 PID 关闭程序，或者修改项目配置文件，使用其他未被占用的端口。
 
- 环境变量配置错误：项目依赖某些环境变量，如数据库连接字符串。检查部署环境的环境变量配置是否正确，在Linux系统可通过 export 命令设置临时环境变量，在 .bashrc 或 .zshrc 文件中设置永久环境变量；在Windows系统可通过系统属性 - 高级 - 环境变量进行配置。
